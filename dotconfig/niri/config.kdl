input {
    keyboard {
        xkb {
            layout "us"
            model ""
            rules ""
            variant "colemak_dh"
            options "ctrl:nocaps"
        }
        repeat-delay 600
        repeat-rate 25
        track-layout "global"
    }
    touchpad {
        tap
        dwt
        dwtp
        natural-scroll
    }
    focus-follows-mouse max-scroll-amount="0%"
}
screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"
prefer-no-csd
overview {
    zoom 0.500000
    workspace-shadow { off; }
}
layout {
    gaps 30
    struts {
        left 0
        right 0
        top 0
        bottom 0
    }
    focus-ring { off; }
    border {
        width 3
        active-gradient angle=45 from="#d8a657" in="oklab" relative-to="workspace-view" to="#7daea3"
        inactive-color "#5a524c"
    }
    background-color "transparent"
    shadow {
        on
        offset x=0.000000 y=5.000000
        softness 30.000000
        spread 5.000000
        draw-behind-window false
        color "#00000070"
    }
    tab-indicator {
        gap 5.000000
        width 4.000000
        length total-proportion=0.500000
        position "top"
        gaps-between-tabs 10
        corner-radius 0.000000
    }
    default-column-width { proportion 0.500000; }
    center-focused-column "on-overflow"
    always-center-single-column
    empty-workspace-above-first
}
cursor {
    xcursor-theme "Bibata-Modern-Classic"
    xcursor-size 24
}
clipboard { disable-primary; }
binds {
    Alt+Print { screenshot-window; }
    Ctrl+Print { screenshot-screen; }
    Mod+1 { focus-workspace 1; }
    Mod+A { focus-column-first; }
    Mod+BracketLeft { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }
    Mod+C { center-column; }
    Mod+Comma { consume-window-into-column; }
    Mod+Ctrl+B { move-column-left; }
    Mod+Ctrl+F { move-column-right; }
    Mod+Ctrl+I { move-workspace-up; }
    Mod+Ctrl+M { expand-column-to-available-width; }
    Mod+Ctrl+N { move-window-down; }
    Mod+Ctrl+P { move-window-up; }
    Mod+Ctrl+R { reset-window-height; }
    Mod+Ctrl+U { move-workspace-down; }
    Mod+D hotkey-overlay-title="Run an Application: fuzzel" { spawn "fuzzel"; }
    Mod+E { focus-column-last; }
    Mod+Equal { set-column-width "+10%"; }
    Mod+G { spawn "clipboard"; }
    Mod+I { focus-workspace-up; }
    Mod+M { maximize-column; }
    Mod+Minus { set-column-width "-10%"; }
    Mod+N { focus-window-down-or-column-right; }
    Mod+O { toggle-overview; }
    Mod+P { focus-window-up-or-column-left; }
    Mod+Period { expel-window-from-column; }
    Mod+Q { close-window; }
    Mod+Return hotkey-overlay-title="Spawn Kitty Terminal" { spawn "app2unit" "-T"; }
    Mod+Shift+E { quit; }
    Mod+Shift+Equal { set-window-height "+10%"; }
    Mod+Shift+I { move-column-to-workspace-up; }
    Mod+Shift+M { fullscreen-window; }
    Mod+Shift+Minus { set-window-height "-10%"; }
    Mod+Shift+N { move-window-down; }
    Mod+Shift+P { move-window-up; }
    Mod+Shift+R { switch-preset-window-height; }
    Mod+Shift+Space { switch-layout "prev"; }
    Mod+Shift+U { move-column-to-workspace-down; }
    Mod+Shift+V { switch-focus-between-floating-and-tiling; }
    Mod+Space { switch-layout "next"; }
    Mod+U { focus-workspace-down; }
    Mod+V { toggle-window-floating; }
    Mod+W { toggle-column-tabbed-display; }
    Mod+X { spawn "fuzzel-powermenu"; }
    Print { screenshot; }
    XF86AudioLowerVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "3%-"; }
    XF86AudioMute allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
    XF86AudioNext allow-when-locked=true { spawn "playerctl" "next"; }
    XF86AudioPause allow-when-locked=true { spawn "playerctl" "play-pause"; }
    XF86AudioPlay allow-when-locked=true { spawn "playerctl" "play-pause"; }
    XF86AudioPrev allow-when-locked=true { spawn "playerctl" "previous"; }
    XF86AudioRaiseVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "3%+" "-l" "1.0"; }
    XF86MonBrightnessDown allow-when-locked=true { spawn "brightnessctl" "s" "5%-"; }
    XF86MonBrightnessUp allow-when-locked=true { spawn "brightnessctl" "s" "5%+"; }
}
spawn-at-startup "uwsm" "finalize"
window-rule {
    draw-border-with-background false
    geometry-corner-radius 8.000000 8.000000 8.000000 8.000000
    clip-to-geometry true
}
layer-rule {
    match namespace="^wallpaper$"
    place-within-backdrop true
}
animations { window-resize { custom-shader "vec4 resize_color(vec3 coords_curr_geo, vec3 size_curr_geo) {\n    vec3 coords_crop_next =       niri_geo_to_tex_next * niri_curr_geo_to_next_geo * (      coords_curr_geo);\n    vec3 coords_shuf_prev = 1.0 - niri_geo_to_tex_prev * niri_curr_geo_to_prev_geo * (1.0 - coords_curr_geo);\n\n    if (0.0 < coords_crop_next.x && coords_crop_next.x < 1.0 &&\n        0.0 < coords_crop_next.y && coords_crop_next.y < 1.0) {\n        return texture2D(niri_tex_next, coords_crop_next.st);\n    } else if (0.0 < coords_shuf_prev.x && coords_shuf_prev.x < 1.0 &&\n               0.0 < coords_shuf_prev.y && coords_shuf_prev.y < 1.0) {\n        return texture2D(niri_tex_prev, coords_shuf_prev.st);\n    } else {\n        // error case: neither of the two textures can be sampled\n\n        // this is impossible for a \"normalized\" resize,\n        // i.e. one where we linearly go from one window size to another\n\n        // it can only happen if we were interrupted during a shrinking resize\n        // into another shrinking resize, such that both textures are smaller than `size_curr_geo`\n\n        return vec4(1.0, 0.0, 0.0, 1.0);\n    }\n}"; }; }